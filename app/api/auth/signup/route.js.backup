import { NextResponse } from "next/server";
import supabaseAdmin, { createUserAdmin } from "@/lib/supabase-admin";

export async function POST(req) {
  console.log("=== SIGNUP ROUTE STARTED ===");

  try {
    console.log("1. Parsing request body...");
    const { email, password } = await req.json();
    console.log("2. Request parsed successfully. Email:", email);

    console.log("3. Checking if user already exists...");
    // Check if user already exists in auth using listUsers
    const [authCheck, dbCheck] = await Promise.all([
      supabaseAdmin.auth.admin.listUsers(),
      supabaseAdmin
        .from("users")
        .select("email")
        .eq("email", email)
        .maybeSingle(),
    ]);

    if (authCheck.error) {
      console.error("Error checking auth users:", authCheck.error);
      return NextResponse.json(
        { error: "Failed to check existing user." },
        { status: 500 }
      );
    }

    if (dbCheck.error) {
      console.error("Error checking database users:", dbCheck.error);
      return NextResponse.json(
        { error: "Failed to check existing user." },
        { status: 500 }
      );
    }

    const authUser = authCheck.data?.users?.find(
      (user) => user.email === email
    );
    const dbUser = dbCheck.data;

    if (authUser || dbUser) {
      console.log(
        "4. User already exists in:",
        authUser ? "Auth" : "",
        dbUser ? "Database" : ""
      );
      return NextResponse.json(
        { error: "User already exists with this email address." },
        { status: 400 }
      );
    }

    console.log("4. User doesn't exist, proceeding with creation...");

    // Create user in Supabase Auth
    console.log("5. Creating auth user...");
    const { data, error } = await supabaseAdmin.auth.admin.createUser({
      email,
      password,
      email_confirm: true,
    });

    if (error) {
      console.error("6. Supabase auth signup error:", error);
      return NextResponse.json(
        { error: error.message || "Failed to create authentication account." },
        { status: 400 }
      );
    }

    if (!data.user) {
      console.error("6. No user data returned from Supabase");
      return NextResponse.json(
        { error: "Failed to create user account." },
        { status: 400 }
      );
    }

    console.log("6. Auth user created successfully:", data.user.id);

    // Insert into public.users table using admin client
    console.log("7. Creating database user record...");
    try {
      const newUser = await createUserAdmin({
        id: data.user.id,
        email: data.user.email,
        name: null,
        image: null,
        role: "User",
      });

      console.log("8. Database user created successfully:", newUser.id);

      return NextResponse.json(
        {
          success: true,
          userId: newUser.id,
          message: "Account created successfully!",
        },
        { status: 200 }
      );
    } catch (dbError) {
      console.error("8. Database insert error:", dbError);
      console.error("Database error message:", dbError.message);
      console.error("Database error code:", dbError.code);
      console.error("Full database error:", JSON.stringify(dbError, null, 2));

      // If database insert fails, clean up the auth user
      try {
        console.log("9. Cleaning up auth user...");
        await supabaseAdmin.auth.admin.deleteUser(data.user.id);
        console.log("9. Cleaned up auth user after database error");
      } catch (cleanupError) {
        console.error("9. Failed to cleanup auth user:", cleanupError);
      }

      return NextResponse.json(
        { error: "Database error creating new user" },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error("=== GENERAL SIGNUP ERROR ===");
    console.error("Error message:", error.message);
    console.error("Error stack:", error.stack);
    console.error(
      "Full error:",
      JSON.stringify(error, Object.getOwnPropertyNames(error), 2)
    );

    return NextResponse.json(
      { error: "An unexpected error occurred during signup." },
      { status: 500 }
    );
  }
}

// import { NextResponse } from "next/server";
// import supabaseAdmin, { createUserAdmin } from "@/lib/supabase-admin";

// export async function POST(req) {
//   try {
//     const { email, password } = await req.json();

//     console.log("Attempting to create user with email:", email);

//     // Check if user already exists in auth
//     const { data: existingUser } =
//       await supabaseAdmin.auth.admin.getUserByEmail(email);
//     if (existingUser.user) {
//       return NextResponse.json(
//         { error: "User already exists with this email address." },
//         { status: 400 }
//       );
//     }

//     // Create user in Supabase Auth
//     const { data, error } = await supabaseAdmin.auth.admin.createUser({
//       email,
//       password,
//       email_confirm: false, // Set to false if you want email confirmation
//     });

//     if (error) {
//       console.error("Supabase auth signup error:", error);
//       return NextResponse.json(
//         { error: error.message || "Failed to create authentication account." },
//         { status: 400 }
//       );
//     }

//     if (!data.user) {
//       console.error("No user data returned from Supabase");
//       return NextResponse.json(
//         { error: "Failed to create user account." },
//         { status: 400 }
//       );
//     }

//     console.log("Auth user created successfully:", data.user.id);

//     // Insert into public.users table using admin client
//     try {
//       const newUser = await createUserAdmin({
//         id: data.user.id, // Use the actual Supabase auth user ID
//         email: data.user.email,
//         name: null,
//         image: null,
//         role: "User",
//       });

//       console.log("Database user created successfully:", newUser.id);

//       return NextResponse.json(
//         {
//           success: true,
//           userId: newUser.id,
//           message: "Account created successfully!",
//         },
//         { status: 200 }
//       );
//     } catch (dbError) {
//       console.error("Database insert error:", dbError);
//       console.error("Database error details:", dbError.message, dbError.code);

//       // If database insert fails, clean up the auth user
//       try {
//         await supabaseAdmin.auth.admin.deleteUser(data.user.id);
//         console.log("Cleaned up auth user after database error");
//       } catch (cleanupError) {
//         console.error("Failed to cleanup auth user:", cleanupError);
//       }

//       return NextResponse.json(
//         { error: "Database error creating new user" },
//         { status: 500 }
//       );
//     }
//   } catch (error) {
//     console.error("General signup error:", error);
//     return NextResponse.json(
//       { error: "An unexpected error occurred during signup." },
//       { status: 500 }
//     );
//   }
// }
